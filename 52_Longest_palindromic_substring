Given a string s, your task is to find the longest palindromic substring within s.

    A substring is a contiguous sequence of characters within a string, defined as s[i...j] where 0 ≤ i ≤ j < len(s).

    A palindrome is a string that reads the same forward and backward. More formally, s is a palindrome if reverse(s) == s.

Note: If there are multiple palindromic substrings with the same length, return the first occurrence of the longest palindromic substring from left to right.

Examples :

Input: s = “forgeeksskeegfor” 
Output: “geeksskeeg”
Explanation: There are several possible palindromic substrings like “kssk”, “ss”, “eeksskee” etc. But the substring “geeksskeeg” is the longest among all.

string longestPalinSubstring(string s) {
    // Write your code here.
     int n=s.size();
        string ans="";
        for(int i=0;i<n;i++){
            int prev=i-1;
            int next=i+1;
            while(prev>=0 && next<n && s[prev]==s[next]){
                prev--;
                next++;
            }
            if(next-prev-1>ans.size()){
                ans=s.substr(prev+1,next-prev-1);
            }
            
            prev=i;
            next=i+1;
            while(prev>=0 && next<n && s[prev]==s[next]){
                prev--;
                next++;
            }
            if(next-prev-1>ans.size()){
                ans=s.substr(prev+1,next-prev-1);
            }
            
        }
        return ans;
}

TC:O(n2);
SC:O(1);
n2 because the for loops run n times meaning there will be n centers and the for each center we go in 2 directions from the center and the worst case is the the whole 's' is a palindrome,then we have traverse the whole length
therefore,O(n2);
