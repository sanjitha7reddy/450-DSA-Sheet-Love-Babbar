Given a matrix mat[][] of size n*n, where each row and column is sorted in non-decreasing order. Find the kth smallest element in the matrix.
Examples:

Input: mat[][] = [[16, 28, 60, 64], k = 3
                [22, 41, 63, 91],
                [27, 50, 87, 93],
                [36, 78, 87, 94]]
Output: 27
Explanation: 27 is the 3rd smallest element.





class Solution {
  public:  
    int count(vector<vector<int>> &arr, int mid)
    {
        int n=arr.size();
        int l=0,h=n-1,c=0;
        while(l<n && h>=0)
        {
            if(arr[l][h]<=mid)
            {
                c+=h+1;
                l++;
            }
            else    //if arr[l][h]>mid
                h--;
        }
        return c;
    }
    int kthSmallest(vector<vector<int>> &arr, int k) {
        int n=arr.size();
        int ans=0;
        int start=arr[0][0],end=arr[n-1][n-1];
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            int c=count(arr,mid); //how many ele r less than or eq to mid
            if(c>=k){
                ans=mid;//as we r taking equal case here only
                end=mid-1;
            }
            else
                start=mid+1;
        }
        return ans;
    }
};


TC: O(n log V)
SC:O(1)
