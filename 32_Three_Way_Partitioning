Given an array and a range a, b. The task is to partition the array around the range such that the array is divided into three parts.
1) All elements smaller than a come first.
2) All elements in range a to b come next.
3) All elements greater than b appear in the end.
The individual elements of three sets can appear in any order. You are required to return the modified array.

Note: The generated output is true if you modify the given array successfully. Otherwise false.

Geeky Challenge: Solve this problem in O(n) time complexity.

Examples:

Input: arr[] = [1, 2, 3, 3, 4], a = 1, b = 2
Output: true
Explanation: One possible arrangement is: {1, 2, 3, 3, 4}. If you return a valid arrangement, output will be true.

class Solution {
  public:
    // Function to partition the array around the range such
    // that array is divided into three parts.
    void threeWayPartition(vector<int>& array, int a, int b) {
        // code here
         int n=array.size();
        int i=0;
        int j=n-1;
        
        int ind=0;
        while(ind<n)
        {
            if(j<ind)
            break;
            
            if(array[ind]<a)
            {
                swap(array[ind],array[i]);
                ind++;
                i++;
            }
            else if(array[ind]>b)
            {
                swap(array[ind],array[j]);
                j--;
            }
            else
            ind++;
        
    }
        
    }
};

TC:O(n);
SC:O(1);
