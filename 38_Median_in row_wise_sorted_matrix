Given a row-wise sorted matrix mat[][] where the number of rows and columns is always odd. Return the median of the matrix.

Examples:

Input: mat[][] = [[1, 3, 5], 
                [2, 6, 9], 
                [3, 6, 9]]
Output: 5
Explanation: Sorting matrix elements gives us [1, 2, 3, 3, 5, 6, 6, 9, 9]. Hence, 5 is median.


class Solution {
  public:
  int blackbox(vector<int>& row, int mid) {
        return upper_bound(row.begin(), row.end(), mid) - row.begin();
    }

    int median(vector<vector<int>> &mat) {
        int n = mat.size();
        int m = mat[0].size();

        // Optimization: narrow the search space to actual matrix value range
        int low = INT_MAX, high = INT_MIN;
        for (int i = 0; i < n; i++) {
            low = min(low, mat[i][0]);
            high = max(high, mat[i][m - 1]);
        }

        while (low <= high) {
            int mid = (low + high) / 2;

            int smallerequals = 0;
            for (int i = 0; i < n; i++) {
                smallerequals += blackbox(mat[i], mid);
            }

            if (smallerequals <= (n * m) / 2) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return low;
    }
};
      

TC:O(n log m log V)
SC:O(1);


