There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly left rotated at an unknown index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be left rotated by 3 indices and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

class Solution {
public:
    // Standard Binary Search
    int binarySearch(vector<int>& nums, int start, int end, int target) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) return mid;
            else if (nums[mid] < target) start = mid + 1;
            else end = mid - 1;
        }
        return -1;
    }

    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int start = 0, end = n - 1;
        int position = 0;  // index of minimum element

        // Step 1: Find rotation index (minimum element index)
        while (start <= end) {
            if (nums[start] <= nums[end]) { 
                position = start; 
                break;
            }

            int mid = start + (end - start) / 2;
            int next = (mid + 1) % n;
            int prev = (mid - 1 + n) % n;

            if (nums[mid] <= nums[next] && nums[mid] <= nums[prev]) {
                position = mid;
                break;
            }

            if (nums[mid] <= nums[end]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }

        // Step 2: Apply binary search in the correct half
        int ans1 = binarySearch(nums, 0, position - 1, target);
        int ans2 = binarySearch(nums, position, n - 1, target);

        if (ans1 != -1) return ans1;
        if (ans2 != -1) return ans2;
        return -1;
    }
};


