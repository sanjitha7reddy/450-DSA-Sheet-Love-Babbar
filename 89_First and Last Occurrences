Given a sorted array arr with possibly some duplicates, the task is to find the first and last occurrences of an element x in the given array.
Note: If the number x is not found in the array then return both the indices as -1.

Examples:

Input: arr[] = [1, 3, 5, 5, 5, 5, 67, 123, 125], x = 5
Output: [2, 5]
Explanation: First occurrence of 5 is at index 2 and last occurrence of 5 is at index 5


class Solution {
public:
    vector<int> find(vector<int>& arr, int x) {
        int n = arr.size();
        vector<int> result(2, -1); // default [-1, -1]
        
        int start = 0, end = n - 1;
        int first = -1, last = -1;

        // Find first occurrence
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] == x) {
                first = mid;
                end = mid - 1; // keep searching left
            } else if (arr[mid] > x) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }

        // Reset start and end for last occurrence
        start = 0; 
        end = n - 1;

        // Find last occurrence
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] == x) {
                last = mid;
                start = mid + 1; // keep searching right
            } else if (arr[mid] > x) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }

        result[0] = first;
        result[1] = last;
        return result;
    }
};
        vector.push_back(ress);

        vector.push_back(ress);

Time Complexity: O(log n)
Auxiliary Space: O(1)
