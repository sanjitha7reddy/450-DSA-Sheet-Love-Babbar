Input: arr = [3, 1, 2, 2, 1, 2, 3, 3], k = 4
Output: 2
Explanation: In the given array, 3 and 2 are the only elements that appears more than n/k times.

class Solution {
  public:
    // Function to find all elements in array that appear more than n/k times.
    int countOccurence(vector<int>& arr, int k) {
        // Your code here
    int n = arr.size();
    int x = n / k;
    int count=0;

    // unordered_map initialization
    unordered_map<int, int> freq;         //SC:O(n)
// unordered map takes O(1) time to update or insert an element;

    for (int i = 0; i < n; i++)
    {
        freq[arr[i]]++;            //tc:O(n)
    }
    // Traversing the map
    for (auto i : freq)
    {
        // Checking if value of a key-value pair
        // is greater than x (where x=n/k)
        if (i.second > x)
        {
            count++;                  //Tc:O(n)
        }
    }
    return count;
    }
};
TC:O(n);
SC:O(n);

